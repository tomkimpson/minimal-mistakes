---
layout: post
title: "Linear Programming in Python with CVXOPT"
modified:
categories: 
excerpt: "Linear Programming in Python with CVXOPT"
tags: []
image:
feature:
date: 2016-07-27T18:29:39-07:00

---

Often we want to maximize/minimize a function w.r.t some exterior constraints. This can be easily done in Python using the [CVXOPT](http://cvxopt.org/index.html) package. <br> <br>


Tutorial examples for the linear and quadratic cases are available: [linear](http://cvxopt.org/examples/tutorial/lp.html), [quadratic](https://courses.csail.mit.edu/6.867/wiki/images/a/a7/Qp-cvxopt.pdf). <br> <br>

One of the main problems with this package is the installation - doing it via the standard method of *pip* or *homebrew* is possible but there is a caveat: for linear programming you want to use the 3rd party solver [glpk](https://www.gnu.org/software/glpk/). This has been optimised for linear functions and consequently is *much* (~100 times) faster than the standard, more general <i>CVXOPT</i> solver. <br> <br>

The best way to do this is to install <i>glpk</i> with homebrew:

    brew install glpk

and then [manually download the CVXOPT package](https://pypi.python.org/pypi/cvxopt)

Unzip the tarball, and then in <i> setup.py</i> change the variables as:

    BUILD_GLPK = 1
    GLPK_LIB_DIR = '/usr/local/Cellar/glpk/4.60/lib'
    GLPK_INC_DIR = '/usr/local/Cellar/glpk/4.60/include'

or the equivalent path on your machine. Then run the setup scipt as

    python setup.py install

This will then allow CVXOPT to use the specific linear <i>glpk</i> solver. <br> <br>

Also useful:

* If you don't care about the minimization output set 

    solvers.options['glpk'] = dict(msg_lev='GLP_MSG_OFF')

* For maximization, just realise that minimizing $- c^T \hat{x}$ is equivalent to maximizing $c^T \hat{x}$, to use the CVXOPT terms. 
    




    

